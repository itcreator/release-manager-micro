package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/runtime"

	"Api/models"
)

/*ListProjectsOK Successful response

swagger:response listProjectsOK
*/
type ListProjectsOK struct {

	// In: body
	Payload []*models.Project `json:"body,omitempty"`
}

// NewListProjectsOK creates ListProjectsOK with default headers values
func NewListProjectsOK() *ListProjectsOK {
	return &ListProjectsOK{}
}

// WithPayload adds the payload to the list projects o k response
func (o *ListProjectsOK) WithPayload(payload []*models.Project) *ListProjectsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list projects o k response
func (o *ListProjectsOK) SetPayload(payload []*models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ListProjectsInternalServerError Error response

swagger:response listProjectsInternalServerError
*/
type ListProjectsInternalServerError struct {
	/*
	  Required: true
	*/
	XErrorCode string `json:"X-Error-Code"`

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewListProjectsInternalServerError creates ListProjectsInternalServerError with default headers values
func NewListProjectsInternalServerError() *ListProjectsInternalServerError {
	return &ListProjectsInternalServerError{}
}

// WithXErrorCode adds the xErrorCode to the list projects internal server error response
func (o *ListProjectsInternalServerError) WithXErrorCode(xErrorCode string) *ListProjectsInternalServerError {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the list projects internal server error response
func (o *ListProjectsInternalServerError) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the list projects internal server error response
func (o *ListProjectsInternalServerError) WithPayload(payload *models.Error) *ListProjectsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list projects internal server error response
func (o *ListProjectsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code
	rw.Header().Add("X-Error-Code", fmt.Sprintf("%v", o.XErrorCode))

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
