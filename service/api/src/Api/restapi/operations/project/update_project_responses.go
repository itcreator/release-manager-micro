package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/runtime"

	"Api/models"
)

/*UpdateProjectOK Project response

swagger:response updateProjectOK
*/
type UpdateProjectOK struct {
	/*
	  Required: true
	*/
	XErrorCode string `json:"X-Error-Code"`

	// In: body
	Payload *models.Project `json:"body,omitempty"`
}

// NewUpdateProjectOK creates UpdateProjectOK with default headers values
func NewUpdateProjectOK() *UpdateProjectOK {
	return &UpdateProjectOK{}
}

// WithXErrorCode adds the xErrorCode to the update project o k response
func (o *UpdateProjectOK) WithXErrorCode(xErrorCode string) *UpdateProjectOK {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the update project o k response
func (o *UpdateProjectOK) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the update project o k response
func (o *UpdateProjectOK) WithPayload(payload *models.Project) *UpdateProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project o k response
func (o *UpdateProjectOK) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code
	rw.Header().Add("X-Error-Code", fmt.Sprintf("%v", o.XErrorCode))

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateProjectNotFound Project response

swagger:response updateProjectNotFound
*/
type UpdateProjectNotFound struct {
	/*
	  Required: true
	*/
	XErrorCode string `json:"X-Error-Code"`

	// In: body
	Payload *models.Project `json:"body,omitempty"`
}

// NewUpdateProjectNotFound creates UpdateProjectNotFound with default headers values
func NewUpdateProjectNotFound() *UpdateProjectNotFound {
	return &UpdateProjectNotFound{}
}

// WithXErrorCode adds the xErrorCode to the update project not found response
func (o *UpdateProjectNotFound) WithXErrorCode(xErrorCode string) *UpdateProjectNotFound {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the update project not found response
func (o *UpdateProjectNotFound) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the update project not found response
func (o *UpdateProjectNotFound) WithPayload(payload *models.Project) *UpdateProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project not found response
func (o *UpdateProjectNotFound) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code
	rw.Header().Add("X-Error-Code", fmt.Sprintf("%v", o.XErrorCode))

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateProjectInternalServerError Error response

swagger:response updateProjectInternalServerError
*/
type UpdateProjectInternalServerError struct {
	/*
	  Required: true
	*/
	XErrorCode string `json:"X-Error-Code"`

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateProjectInternalServerError creates UpdateProjectInternalServerError with default headers values
func NewUpdateProjectInternalServerError() *UpdateProjectInternalServerError {
	return &UpdateProjectInternalServerError{}
}

// WithXErrorCode adds the xErrorCode to the update project internal server error response
func (o *UpdateProjectInternalServerError) WithXErrorCode(xErrorCode string) *UpdateProjectInternalServerError {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the update project internal server error response
func (o *UpdateProjectInternalServerError) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the update project internal server error response
func (o *UpdateProjectInternalServerError) WithPayload(payload *models.Error) *UpdateProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project internal server error response
func (o *UpdateProjectInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code
	rw.Header().Add("X-Error-Code", fmt.Sprintf("%v", o.XErrorCode))

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
