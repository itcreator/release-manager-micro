package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ReadProjectsHandlerFunc turns a function with the right signature into a read projects handler
type ReadProjectsHandlerFunc func(ReadProjectsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadProjectsHandlerFunc) Handle(params ReadProjectsParams) middleware.Responder {
	return fn(params)
}

// ReadProjectsHandler interface for that can handle valid read projects params
type ReadProjectsHandler interface {
	Handle(ReadProjectsParams) middleware.Responder
}

// NewReadProjects creates a new http.Handler for the read projects operation
func NewReadProjects(ctx *middleware.Context, handler ReadProjectsHandler) *ReadProjects {
	return &ReadProjects{Context: ctx, Handler: handler}
}

/*ReadProjects swagger:route GET /projects/{id} project readProjects

Read the projects

Get all projects list


*/
type ReadProjects struct {
	Context *middleware.Context
	Handler ReadProjectsHandler
}

func (o *ReadProjects) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewReadProjectsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
