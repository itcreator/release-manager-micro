package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/runtime"

	"Api/models"
)

/*ReadProjectsOK Project response

swagger:response readProjectsOK
*/
type ReadProjectsOK struct {
	/*
	  Required: true
	*/
	XErrorCode string `json:"X-Error-Code"`

	// In: body
	Payload *models.Project `json:"body,omitempty"`
}

// NewReadProjectsOK creates ReadProjectsOK with default headers values
func NewReadProjectsOK() *ReadProjectsOK {
	return &ReadProjectsOK{}
}

// WithXErrorCode adds the xErrorCode to the read projects o k response
func (o *ReadProjectsOK) WithXErrorCode(xErrorCode string) *ReadProjectsOK {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the read projects o k response
func (o *ReadProjectsOK) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the read projects o k response
func (o *ReadProjectsOK) WithPayload(payload *models.Project) *ReadProjectsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read projects o k response
func (o *ReadProjectsOK) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadProjectsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code
	rw.Header().Add("X-Error-Code", fmt.Sprintf("%v", o.XErrorCode))

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ReadProjectsDefault Error response

swagger:response readProjectsDefault
*/
type ReadProjectsDefault struct {
	_statusCode int
	/*
	  Required: true
	*/
	XErrorCode string `json:"X-Error-Code"`

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadProjectsDefault creates ReadProjectsDefault with default headers values
func NewReadProjectsDefault(code int) *ReadProjectsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReadProjectsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the read projects default response
func (o *ReadProjectsDefault) WithStatusCode(code int) *ReadProjectsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the read projects default response
func (o *ReadProjectsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXErrorCode adds the xErrorCode to the read projects default response
func (o *ReadProjectsDefault) WithXErrorCode(xErrorCode string) *ReadProjectsDefault {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the read projects default response
func (o *ReadProjectsDefault) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the read projects default response
func (o *ReadProjectsDefault) WithPayload(payload *models.Error) *ReadProjectsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read projects default response
func (o *ReadProjectsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadProjectsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code
	rw.Header().Add("X-Error-Code", fmt.Sprintf("%v", o.XErrorCode))

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
