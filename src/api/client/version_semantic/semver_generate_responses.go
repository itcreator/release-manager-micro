// Code generated by go-swagger; DO NOT EDIT.

package version_semantic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "api/models"
)

// SemverGenerateReader is a Reader for the SemverGenerate structure.
type SemverGenerateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SemverGenerateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewSemverGenerateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewSemverGenerateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSemverGenerateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSemverGenerateCreated creates a SemverGenerateCreated with default headers values
func NewSemverGenerateCreated() *SemverGenerateCreated {
	return &SemverGenerateCreated{}
}

/*SemverGenerateCreated handles this case with default header values.

Generate semantic version response
*/
type SemverGenerateCreated struct {
	Payload *models.SemverTagSet
}

func (o *SemverGenerateCreated) Error() string {
	return fmt.Sprintf("[POST /projects/{projectUuid}/version/semantic][%d] semverGenerateCreated  %+v", 201, o.Payload)
}

func (o *SemverGenerateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SemverTagSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSemverGenerateNotFound creates a SemverGenerateNotFound with default headers values
func NewSemverGenerateNotFound() *SemverGenerateNotFound {
	return &SemverGenerateNotFound{}
}

/*SemverGenerateNotFound handles this case with default header values.

Semver: project not found response
*/
type SemverGenerateNotFound struct {
	Payload *models.Error
}

func (o *SemverGenerateNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{projectUuid}/version/semantic][%d] semverGenerateNotFound  %+v", 404, o.Payload)
}

func (o *SemverGenerateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSemverGenerateInternalServerError creates a SemverGenerateInternalServerError with default headers values
func NewSemverGenerateInternalServerError() *SemverGenerateInternalServerError {
	return &SemverGenerateInternalServerError{}
}

/*SemverGenerateInternalServerError handles this case with default header values.

Error response
*/
type SemverGenerateInternalServerError struct {
	XErrorCode string

	Payload *models.Error
}

func (o *SemverGenerateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projects/{projectUuid}/version/semantic][%d] semverGenerateInternalServerError  %+v", 500, o.Payload)
}

func (o *SemverGenerateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Error-Code
	o.XErrorCode = response.GetHeader("X-Error-Code")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
