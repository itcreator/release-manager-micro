// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateProject creates new projects
*/
func (a *Client) CreateProject(params *CreateProjectParams) (*CreateProjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/release-manager.v1+json"},
		ConsumesMediaTypes: []string{"application/release-manager.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProjectCreated), nil

}

/*
ListProjects lists the projects

Get all projects list.

*/
func (a *Client) ListProjects(params *ListProjectsParams) (*ListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/release-manager.v1+json"},
		ConsumesMediaTypes: []string{"application/release-manager.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectsOK), nil

}

/*
ReadProject reads the projects

Get all projects list

*/
func (a *Client) ReadProject(params *ReadProjectParams) (*ReadProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readProject",
		Method:             "GET",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/release-manager.v1+json"},
		ConsumesMediaTypes: []string{"application/release-manager.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadProjectOK), nil

}

/*
UpdateProject update project API
*/
func (a *Client) UpdateProject(params *UpdateProjectParams) (*UpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/release-manager.v1+json"},
		ConsumesMediaTypes: []string{"application/release-manager.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProjectOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
