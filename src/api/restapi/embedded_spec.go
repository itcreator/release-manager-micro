// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/release-manager.v1+json"
  ],
  "produces": [
    "application/release-manager.v1+json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This application generate version for your software.",
    "title": "Release Manager",
    "contact": {
      "name": "Vital Leshchyk",
      "url": "https://github.com/itcreator/release-manager",
      "email": "vitalleshchyk@gmail.com"
    },
    "license": {
      "name": "3-Clause BSD",
      "url": "https://github.com/itcreator/release-manager-micro/blob/master/LICENSE"
    },
    "version": "0.2.0"
  },
  "paths": {
    "/increamental_version/{projectName}": {
      "put": {
        "description": "Incremental Versioning\nUpdate revision number\n",
        "tags": [
          "versionIncremental"
        ],
        "summary": "Update incremental version number (Only for maintenance)",
        "operationId": "incrementalUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IncrementalVersionNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IncrementalUpdateResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Incremental Versioning\n",
        "tags": [
          "versionIncremental"
        ],
        "summary": "Generate new incremental version number",
        "operationId": "incrementalGenerate",
        "responses": {
          "201": {
            "$ref": "#/responses/IncrementalGenerateResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete generated version\n",
        "tags": [
          "versionIncremental"
        ],
        "summary": "Delete incremental version number (RESET)",
        "operationId": "incrementalDelete",
        "responses": {
          "204": {},
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "maxLength": 100,
          "type": "string",
          "x-nullable": false,
          "name": "projectName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/projects": {
      "get": {
        "description": "Get all projects list.\n",
        "tags": [
          "project"
        ],
        "summary": "List the projects",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ProjectList",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create new projects",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ProjectResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectUuid}/version/semantic": {
      "post": {
        "description": "Semantic Versioning 2.0.0\nSee also http://semver.org/spec/v2.0.0.html\nBased on branching model [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/)\n",
        "tags": [
          "versionSemantic"
        ],
        "summary": "Generate new semantic version number (based on gitflow)",
        "operationId": "semverGenerate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SemverGenerateParams"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/SemverGenerateResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Project ID in UUID format",
          "name": "projectUuid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/projects/{uuid}": {
      "get": {
        "description": "Get all projects list\n",
        "tags": [
          "project"
        ],
        "summary": "Read the projects",
        "operationId": "readProject",
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectResponse"
          },
          "404": {
            "$ref": "#/responses/ProjectResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "project"
        ],
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProjectResponse"
          },
          "404": {
            "$ref": "#/responses/ProjectResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Project ID in UUID format",
          "name": "uuid",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Error": {
      "description": "Contains all the properties any error response from the API will contain.\nSome properties are optional so might be empty most of the time\n",
      "type": "object",
      "title": "Error Structure",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "the error code, this is not necessarily the http status code",
          "type": "integer",
          "format": "int32"
        },
        "helpUrl": {
          "description": "an optional url for getting more help about this error",
          "type": "string",
          "format": "uri"
        },
        "message": {
          "description": "a human readable version of the error",
          "type": "string"
        }
      }
    },
    "IncrementalVersionNumber": {
      "type": "object",
      "title": "Incremental Version Number",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "integer",
          "format": "uint64",
          "title": "The version number",
          "x-nullable": false
        }
      }
    },
    "Project": {
      "type": "object",
      "title": "Project",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "title": "The description of the project.",
          "maxLength": 4000,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "title": "The name of the project.",
          "maxLength": 150,
          "minLength": 2,
          "x-nullable": false
        },
        "uuid": {
          "description": "A unique identifier for the project. These are created in ascending order.",
          "type": "integer",
          "format": "uuid",
          "title": "The id of the project.",
          "readOnly": true
        }
      }
    },
    "SemverGenerateParams": {
      "type": "object",
      "title": "Paremeters for generate version number for project (Semantic Versioning)",
      "required": [
        "major",
        "minor",
        "branch"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "title": "Name of branch for which needed to generate a version tag.",
          "maxLength": 150,
          "minLength": 2,
          "x-nullable": false
        },
        "major": {
          "description": "MAJOR version when you make incompatible API changes",
          "type": "integer",
          "format": "uint32",
          "title": "Major number",
          "readOnly": true
        },
        "minor": {
          "description": "MAJOR version when you make incompatible API changes",
          "type": "integer",
          "format": "uint32",
          "title": "Minor number",
          "readOnly": true
        }
      }
    },
    "SemverNumber": {
      "type": "object",
      "title": "Semver Number",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string",
          "title": "The version number",
          "maxLength": 150,
          "minLength": 3,
          "x-nullable": false
        }
      }
    }
  },
  "responses": {
    "ErrorResponse": {
      "description": "Error response",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "headers": {
        "X-Error-Code": {
          "type": "string"
        }
      }
    },
    "IncrementalGenerateResponse": {
      "description": "Generate incremental version response",
      "schema": {
        "$ref": "#/definitions/IncrementalVersionNumber"
      }
    },
    "IncrementalUpdateResponse": {
      "description": "Update incremental version response",
      "schema": {
        "$ref": "#/definitions/IncrementalVersionNumber"
      }
    },
    "ProjectResponse": {
      "description": "Project response",
      "schema": {
        "$ref": "#/definitions/Project"
      },
      "headers": {
        "X-Error-Code": {
          "type": "string"
        }
      }
    },
    "SemverGenerateResponse": {
      "description": "Generate semantic version response",
      "schema": {
        "$ref": "#/definitions/SemverNumber"
      }
    }
  },
  "tags": [
    {
      "description": "manages project",
      "name": "project"
    },
    {
      "description": "Generate version tag. See also http://semver.org/spec/v2.0.0.html",
      "name": "versionSemantic"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/release-manager.v1+json"
  ],
  "produces": [
    "application/release-manager.v1+json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This application generate version for your software.",
    "title": "Release Manager",
    "contact": {
      "name": "Vital Leshchyk",
      "url": "https://github.com/itcreator/release-manager",
      "email": "vitalleshchyk@gmail.com"
    },
    "license": {
      "name": "3-Clause BSD",
      "url": "https://github.com/itcreator/release-manager-micro/blob/master/LICENSE"
    },
    "version": "0.2.0"
  },
  "paths": {
    "/increamental_version/{projectName}": {
      "put": {
        "description": "Incremental Versioning\nUpdate revision number\n",
        "tags": [
          "versionIncremental"
        ],
        "summary": "Update incremental version number (Only for maintenance)",
        "operationId": "incrementalUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IncrementalVersionNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update incremental version response",
            "schema": {
              "$ref": "#/definitions/IncrementalVersionNumber"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Incremental Versioning\n",
        "tags": [
          "versionIncremental"
        ],
        "summary": "Generate new incremental version number",
        "operationId": "incrementalGenerate",
        "responses": {
          "201": {
            "description": "Generate incremental version response",
            "schema": {
              "$ref": "#/definitions/IncrementalVersionNumber"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete generated version\n",
        "tags": [
          "versionIncremental"
        ],
        "summary": "Delete incremental version number (RESET)",
        "operationId": "incrementalDelete",
        "responses": {
          "204": {},
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 100,
          "type": "string",
          "x-nullable": false,
          "name": "projectName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/projects": {
      "get": {
        "description": "Get all projects list.\n",
        "tags": [
          "project"
        ],
        "summary": "List the projects",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/listProjectsOKBody"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create new projects",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project response",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/projects/{projectUuid}/version/semantic": {
      "post": {
        "description": "Semantic Versioning 2.0.0\nSee also http://semver.org/spec/v2.0.0.html\nBased on branching model [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/)\n",
        "tags": [
          "versionSemantic"
        ],
        "summary": "Generate new semantic version number (based on gitflow)",
        "operationId": "semverGenerate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SemverGenerateParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Generate semantic version response",
            "schema": {
              "$ref": "#/definitions/SemverNumber"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Project ID in UUID format",
          "name": "projectUuid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/projects/{uuid}": {
      "get": {
        "description": "Get all projects list\n",
        "tags": [
          "project"
        ],
        "summary": "Read the projects",
        "operationId": "readProject",
        "responses": {
          "200": {
            "description": "Project response",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Project response",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "project"
        ],
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Project response",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {
              "X-Error-Code": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Project ID in UUID format",
          "name": "uuid",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Error": {
      "description": "Contains all the properties any error response from the API will contain.\nSome properties are optional so might be empty most of the time\n",
      "type": "object",
      "title": "Error Structure",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "the error code, this is not necessarily the http status code",
          "type": "integer",
          "format": "int32"
        },
        "helpUrl": {
          "description": "an optional url for getting more help about this error",
          "type": "string",
          "format": "uri"
        },
        "message": {
          "description": "a human readable version of the error",
          "type": "string"
        }
      }
    },
    "IncrementalVersionNumber": {
      "type": "object",
      "title": "Incremental Version Number",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "integer",
          "format": "uint64",
          "title": "The version number",
          "x-nullable": false
        }
      }
    },
    "Project": {
      "type": "object",
      "title": "Project",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "title": "The description of the project.",
          "maxLength": 4000,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "title": "The name of the project.",
          "maxLength": 150,
          "minLength": 2,
          "x-nullable": false
        },
        "uuid": {
          "description": "A unique identifier for the project. These are created in ascending order.",
          "type": "integer",
          "format": "uuid",
          "title": "The id of the project.",
          "readOnly": true
        }
      }
    },
    "SemverGenerateParams": {
      "type": "object",
      "title": "Paremeters for generate version number for project (Semantic Versioning)",
      "required": [
        "major",
        "minor",
        "branch"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "title": "Name of branch for which needed to generate a version tag.",
          "maxLength": 150,
          "minLength": 2,
          "x-nullable": false
        },
        "major": {
          "description": "MAJOR version when you make incompatible API changes",
          "type": "integer",
          "format": "uint32",
          "title": "Major number",
          "readOnly": true
        },
        "minor": {
          "description": "MAJOR version when you make incompatible API changes",
          "type": "integer",
          "format": "uint32",
          "title": "Minor number",
          "readOnly": true
        }
      }
    },
    "SemverNumber": {
      "type": "object",
      "title": "Semver Number",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string",
          "title": "The version number",
          "maxLength": 150,
          "minLength": 3,
          "x-nullable": false
        }
      }
    },
    "listProjectsOKBody": {
      "type": "array",
      "title": "ProjectList",
      "items": {
        "$ref": "#/definitions/Project"
      },
      "x-go-gen-location": "operations"
    }
  },
  "responses": {
    "ErrorResponse": {
      "description": "Error response",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "headers": {
        "X-Error-Code": {
          "type": "string"
        }
      }
    },
    "IncrementalGenerateResponse": {
      "description": "Generate incremental version response",
      "schema": {
        "$ref": "#/definitions/IncrementalVersionNumber"
      }
    },
    "IncrementalUpdateResponse": {
      "description": "Update incremental version response",
      "schema": {
        "$ref": "#/definitions/IncrementalVersionNumber"
      }
    },
    "ProjectResponse": {
      "description": "Project response",
      "schema": {
        "$ref": "#/definitions/Project"
      },
      "headers": {
        "X-Error-Code": {
          "type": "string"
        }
      }
    },
    "SemverGenerateResponse": {
      "description": "Generate semantic version response",
      "schema": {
        "$ref": "#/definitions/SemverNumber"
      }
    }
  },
  "tags": [
    {
      "description": "manages project",
      "name": "project"
    },
    {
      "description": "Generate version tag. See also http://semver.org/spec/v2.0.0.html",
      "name": "versionSemantic"
    }
  ]
}`))
}
