// Code generated by go-swagger; DO NOT EDIT.

package version_incremental

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IncrementalUpdateHandlerFunc turns a function with the right signature into a incremental update handler
type IncrementalUpdateHandlerFunc func(IncrementalUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IncrementalUpdateHandlerFunc) Handle(params IncrementalUpdateParams) middleware.Responder {
	return fn(params)
}

// IncrementalUpdateHandler interface for that can handle valid incremental update params
type IncrementalUpdateHandler interface {
	Handle(IncrementalUpdateParams) middleware.Responder
}

// NewIncrementalUpdate creates a new http.Handler for the incremental update operation
func NewIncrementalUpdate(ctx *middleware.Context, handler IncrementalUpdateHandler) *IncrementalUpdate {
	return &IncrementalUpdate{Context: ctx, Handler: handler}
}

/*IncrementalUpdate swagger:route PUT /increamental_version/{projectName} versionIncremental incrementalUpdate

Update incremental version number (Only for maintenance)

Incremental Versioning
Update revision number


*/
type IncrementalUpdate struct {
	Context *middleware.Context
	Handler IncrementalUpdateHandler
}

func (o *IncrementalUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIncrementalUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
