package version_incremental

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IncrementalGenerateHandlerFunc turns a function with the right signature into a incremental generate handler
type IncrementalGenerateHandlerFunc func(IncrementalGenerateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IncrementalGenerateHandlerFunc) Handle(params IncrementalGenerateParams) middleware.Responder {
	return fn(params)
}

// IncrementalGenerateHandler interface for that can handle valid incremental generate params
type IncrementalGenerateHandler interface {
	Handle(IncrementalGenerateParams) middleware.Responder
}

// NewIncrementalGenerate creates a new http.Handler for the incremental generate operation
func NewIncrementalGenerate(ctx *middleware.Context, handler IncrementalGenerateHandler) *IncrementalGenerate {
	return &IncrementalGenerate{Context: ctx, Handler: handler}
}

/*IncrementalGenerate swagger:route POST /increamental_version/{projectName} versionIncremental incrementalGenerate

Generate new incremental version number

Incremental Versioning


*/
type IncrementalGenerate struct {
	Context *middleware.Context
	Handler IncrementalGenerateHandler
}

func (o *IncrementalGenerate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewIncrementalGenerateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
