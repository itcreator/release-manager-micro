// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ReadProjectHandlerFunc turns a function with the right signature into a read project handler
type ReadProjectHandlerFunc func(ReadProjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadProjectHandlerFunc) Handle(params ReadProjectParams) middleware.Responder {
	return fn(params)
}

// ReadProjectHandler interface for that can handle valid read project params
type ReadProjectHandler interface {
	Handle(ReadProjectParams) middleware.Responder
}

// NewReadProject creates a new http.Handler for the read project operation
func NewReadProject(ctx *middleware.Context, handler ReadProjectHandler) *ReadProject {
	return &ReadProject{Context: ctx, Handler: handler}
}

/*ReadProject swagger:route GET /projects/{id} project readProject

Read the projects

Get all projects list


*/
type ReadProject struct {
	Context *middleware.Context
	Handler ReadProjectHandler
}

func (o *ReadProject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadProjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
