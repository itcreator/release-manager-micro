// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "api/models"
)

// ReadProjectOKCode is the HTTP code returned for type ReadProjectOK
const ReadProjectOKCode int = 200

/*ReadProjectOK Project response

swagger:response readProjectOK
*/
type ReadProjectOK struct {
	/*

	 */
	XErrorCode string `json:"X-Error-Code"`

	/*
	  In: Body
	*/
	Payload *models.Project `json:"body,omitempty"`
}

// NewReadProjectOK creates ReadProjectOK with default headers values
func NewReadProjectOK() *ReadProjectOK {

	return &ReadProjectOK{}
}

// WithXErrorCode adds the xErrorCode to the read project o k response
func (o *ReadProjectOK) WithXErrorCode(xErrorCode string) *ReadProjectOK {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the read project o k response
func (o *ReadProjectOK) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the read project o k response
func (o *ReadProjectOK) WithPayload(payload *models.Project) *ReadProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read project o k response
func (o *ReadProjectOK) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code

	xErrorCode := o.XErrorCode
	if xErrorCode != "" {
		rw.Header().Set("X-Error-Code", xErrorCode)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadProjectNotFoundCode is the HTTP code returned for type ReadProjectNotFound
const ReadProjectNotFoundCode int = 404

/*ReadProjectNotFound Project response

swagger:response readProjectNotFound
*/
type ReadProjectNotFound struct {
	/*

	 */
	XErrorCode string `json:"X-Error-Code"`

	/*
	  In: Body
	*/
	Payload *models.Project `json:"body,omitempty"`
}

// NewReadProjectNotFound creates ReadProjectNotFound with default headers values
func NewReadProjectNotFound() *ReadProjectNotFound {

	return &ReadProjectNotFound{}
}

// WithXErrorCode adds the xErrorCode to the read project not found response
func (o *ReadProjectNotFound) WithXErrorCode(xErrorCode string) *ReadProjectNotFound {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the read project not found response
func (o *ReadProjectNotFound) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the read project not found response
func (o *ReadProjectNotFound) WithPayload(payload *models.Project) *ReadProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read project not found response
func (o *ReadProjectNotFound) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code

	xErrorCode := o.XErrorCode
	if xErrorCode != "" {
		rw.Header().Set("X-Error-Code", xErrorCode)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadProjectInternalServerErrorCode is the HTTP code returned for type ReadProjectInternalServerError
const ReadProjectInternalServerErrorCode int = 500

/*ReadProjectInternalServerError Error response

swagger:response readProjectInternalServerError
*/
type ReadProjectInternalServerError struct {
	/*

	 */
	XErrorCode string `json:"X-Error-Code"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadProjectInternalServerError creates ReadProjectInternalServerError with default headers values
func NewReadProjectInternalServerError() *ReadProjectInternalServerError {

	return &ReadProjectInternalServerError{}
}

// WithXErrorCode adds the xErrorCode to the read project internal server error response
func (o *ReadProjectInternalServerError) WithXErrorCode(xErrorCode string) *ReadProjectInternalServerError {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the read project internal server error response
func (o *ReadProjectInternalServerError) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the read project internal server error response
func (o *ReadProjectInternalServerError) WithPayload(payload *models.Error) *ReadProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read project internal server error response
func (o *ReadProjectInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code

	xErrorCode := o.XErrorCode
	if xErrorCode != "" {
		rw.Header().Set("X-Error-Code", xErrorCode)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
