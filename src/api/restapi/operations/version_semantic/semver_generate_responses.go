// Code generated by go-swagger; DO NOT EDIT.

package version_semantic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "api/models"
)

// SemverGenerateCreatedCode is the HTTP code returned for type SemverGenerateCreated
const SemverGenerateCreatedCode int = 201

/*SemverGenerateCreated Generate semantic version response

swagger:response semverGenerateCreated
*/
type SemverGenerateCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SemverTagSet `json:"body,omitempty"`
}

// NewSemverGenerateCreated creates SemverGenerateCreated with default headers values
func NewSemverGenerateCreated() *SemverGenerateCreated {

	return &SemverGenerateCreated{}
}

// WithPayload adds the payload to the semver generate created response
func (o *SemverGenerateCreated) WithPayload(payload *models.SemverTagSet) *SemverGenerateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the semver generate created response
func (o *SemverGenerateCreated) SetPayload(payload *models.SemverTagSet) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SemverGenerateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SemverGenerateNotFoundCode is the HTTP code returned for type SemverGenerateNotFound
const SemverGenerateNotFoundCode int = 404

/*SemverGenerateNotFound Semver: project not found response

swagger:response semverGenerateNotFound
*/
type SemverGenerateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSemverGenerateNotFound creates SemverGenerateNotFound with default headers values
func NewSemverGenerateNotFound() *SemverGenerateNotFound {

	return &SemverGenerateNotFound{}
}

// WithPayload adds the payload to the semver generate not found response
func (o *SemverGenerateNotFound) WithPayload(payload *models.Error) *SemverGenerateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the semver generate not found response
func (o *SemverGenerateNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SemverGenerateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SemverGenerateInternalServerErrorCode is the HTTP code returned for type SemverGenerateInternalServerError
const SemverGenerateInternalServerErrorCode int = 500

/*SemverGenerateInternalServerError Error response

swagger:response semverGenerateInternalServerError
*/
type SemverGenerateInternalServerError struct {
	/*

	 */
	XErrorCode string `json:"X-Error-Code"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSemverGenerateInternalServerError creates SemverGenerateInternalServerError with default headers values
func NewSemverGenerateInternalServerError() *SemverGenerateInternalServerError {

	return &SemverGenerateInternalServerError{}
}

// WithXErrorCode adds the xErrorCode to the semver generate internal server error response
func (o *SemverGenerateInternalServerError) WithXErrorCode(xErrorCode string) *SemverGenerateInternalServerError {
	o.XErrorCode = xErrorCode
	return o
}

// SetXErrorCode sets the xErrorCode to the semver generate internal server error response
func (o *SemverGenerateInternalServerError) SetXErrorCode(xErrorCode string) {
	o.XErrorCode = xErrorCode
}

// WithPayload adds the payload to the semver generate internal server error response
func (o *SemverGenerateInternalServerError) WithPayload(payload *models.Error) *SemverGenerateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the semver generate internal server error response
func (o *SemverGenerateInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SemverGenerateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Error-Code

	xErrorCode := o.XErrorCode
	if xErrorCode != "" {
		rw.Header().Set("X-Error-Code", xErrorCode)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
