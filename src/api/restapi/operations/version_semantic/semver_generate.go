package version_semantic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SemverGenerateHandlerFunc turns a function with the right signature into a semver generate handler
type SemverGenerateHandlerFunc func(SemverGenerateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SemverGenerateHandlerFunc) Handle(params SemverGenerateParams) middleware.Responder {
	return fn(params)
}

// SemverGenerateHandler interface for that can handle valid semver generate params
type SemverGenerateHandler interface {
	Handle(SemverGenerateParams) middleware.Responder
}

// NewSemverGenerate creates a new http.Handler for the semver generate operation
func NewSemverGenerate(ctx *middleware.Context, handler SemverGenerateHandler) *SemverGenerate {
	return &SemverGenerate{Context: ctx, Handler: handler}
}

/*SemverGenerate swagger:route POST /projects/{projectId}/version/semantic versionSemantic semverGenerate

Generate new semantic version number (based on gitflow)

Semantic Versioning 2.0.0
See also http://semver.org/spec/v2.0.0.html
Based on branching model [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/)


*/
type SemverGenerate struct {
	Context *middleware.Context
	Handler SemverGenerateHandler
}

func (o *SemverGenerate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSemverGenerateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
