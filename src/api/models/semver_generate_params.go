// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SemverGenerateParams Paremeters for generate version number for project (Semantic Versioning)
// swagger:model SemverGenerateParams
type SemverGenerateParams struct {

	// Name of branch for which needed to generate a version tag.
	// Required: true
	// Max Length: 150
	// Min Length: 2
	Branch string `json:"branch"`

	// Major number
	//
	// MAJOR version when you make incompatible API changes
	// Required: true
	// Read Only: true
	Major uint32 `json:"major"`

	// Minor number
	//
	// MAJOR version when you make incompatible API changes
	// Required: true
	// Read Only: true
	Minor uint32 `json:"minor"`
}

// Validate validates this semver generate params
func (m *SemverGenerateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMajor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SemverGenerateParams) validateBranch(formats strfmt.Registry) error {

	if err := validate.RequiredString("branch", "body", string(m.Branch)); err != nil {
		return err
	}

	if err := validate.MinLength("branch", "body", string(m.Branch), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("branch", "body", string(m.Branch), 150); err != nil {
		return err
	}

	return nil
}

func (m *SemverGenerateParams) validateMajor(formats strfmt.Registry) error {

	if err := validate.Required("major", "body", uint32(m.Major)); err != nil {
		return err
	}

	return nil
}

func (m *SemverGenerateParams) validateMinor(formats strfmt.Registry) error {

	if err := validate.Required("minor", "body", uint32(m.Minor)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SemverGenerateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SemverGenerateParams) UnmarshalBinary(b []byte) error {
	var res SemverGenerateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
